version: 2.1

orbs:
  slack: circleci/slack@4.1.1

executors:
  node-executor:
    docker:
      - image: circleci/node:13.8.0
  aws-executor:
    docker:
      - image: circleci/awscli
  ansible-executor:
    docker:
      - image: python:3.7-alpine3.11

commands:
  npm-install:
    parameters:
      dir:
        type: string
    steps:
      - run:
          command: |
            cd <<parameters.dir>>
            npm install
            npm run build
  run-test:
    parameters:
      dir:
        type: string
    steps:
      - run:
          command: |
            cd <<parameters.dir>>
            npm run test
  run-scans:
    parameters:
      dir:
        type: string
    steps:
      - run:
          command: |
            cd <<parameters.dir>>
            npm audit fix --audit-level=critical
  aws-cf-deploy:
    parameters:
      cf-template:
        type: string
      project-tag:
        type: string
      stack-name:
        type: string
    steps:
      - run:
          command: | 
            aws cloudformation deploy \
            --template-file .circleci/files/<<parameters.cftemplate>> \
            --tags project=<<parameters.projecttag>> \
            --stack-name "<<parameters.stackname>>-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
  save-to-memstash:
    parameters:
      project-tag:
        type: string
      token:
        type: string
        default: "d84673bf-8716-435c-960f-04b758497ede"
      key:
        type: string
    steps:
      - run:
          command: |
            URL="aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDNSName' \
            --filters "Name=tag:project,Values=<<parameters.project-tag>>"
            curl -H "Content-Type: text/plain" -H "token:<<parameters.token>>" --request PUT --data "${URL}" https://api.memstash.io/values/<<parameters.key>>${CIRCLE_WORKFLOW_ID}
  save-ansible-inventory:
    parameters:
      project-tag:
        type: string
    steps:
      - run:
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=<<parameters.project-tag>>" \
            --output text >> ansible/inventory.txt
  #rollback-deploy:
  #  parameters:
  #  steps:
  #    - run:
  #        command: |

jobs:
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - npm-install:
          dir: frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "package-lock.json" }}
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1

  build-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - npm-install:
          dir: backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "package-lock.json" }}
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1

  test-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-]
      - run-test:
          dir: frontend
      - store_test_results:
          path: ./frontend/
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1

  test-backend:
    executor: node-executor
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build-]
      - run-test:
          dir: backend
      - store_test_results:
          path: ./backend/
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1
        
  scan-frontend:
    executor: node-executor
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build-]
      - run-scans:
          dir: frontend
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1
                    
  scan-backend:
    executor: node-executor
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build-]
      - run-scans:
          dir: backend
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - aws-cf-deploy:
          cf-template: "backend.yml"
          project-tag: udapeople-backend
          stack-name: udapeople-backend
      - save-to-memstash:
          project-tag: udapeople-backend
          key: backend-url
      - aws-cf-deploy:
          cf-template: "frontend.yml"
          project-tag: udapeople-frontend
          stack-name: udapeople-frontend
      - save-ansible-inventory:
          project-tag: udapeople-backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure

###
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
            